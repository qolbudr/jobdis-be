// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  seed     = "prisma/seed.ts"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id                    Int           @id @default(autoincrement())
  email                 String        @unique
  name                  String?
  password              String
  role                  Role
  jobVacancies          JobVacancy[]
  userInChat            PaymentChat[] @relation("UserInChat")
  consultantInSession   ChatSession?  @relation("ConsultantInSession")
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @default(now())
}

enum Role {
  user
  admin
  company
  consultant
}

model JobVacancy {
  id          Int       @id @default(autoincrement())
  title       String
  location    String
  division    String?
  workType    WorkType
  salary      Int?
  excerpt     String?   @db.LongText
  description String    @db.LongText
  link        String
  postedBy    Users     @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
}

enum WorkType {
  freelance
  fulltime
  parttime
  internship
}

model ChatSession {
  id              Int           @id @default(autoincrement())
  consultant      Users         @relation("ConsultantInSession", fields: [consultantId], references: [id])
  consultantId    Int           @unique
  price           Int
  status          ChatSessionStatus
  payment         PaymentChat[] @relation("PaymentInChat")
}

enum ChatSessionStatus {
  online
  busy
  offline
}

model PaymentChat {
  id              Int         @id @default(autoincrement())
  roomId          String      @unique
  user            Users       @relation("UserInChat", fields: [userId], references: [id])
  userId          Int
  session         ChatSession @relation("PaymentInChat", fields: [sessionId], references: [id])
  sessionId       Int
  paymentProof    String
  paid            Boolean     @default(false)      
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @default(now())
}
